# -*- coding: utf-8 -*-
"""JW_KS_LSTM_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SH5BSpLNYOY3gV4sOSo6eLCm6wXRz6oy

Standard Scale -> test 제외 후 각각
"""

from os.path import join as opj
import pandas as pd

"""# LSTM
https://pasus.tistory.com/266
https://6mini.github.io/deep%20learning/2021/10/21/NNHyperparameter/

"""



# LSTM model
import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

def create_lstm_model(trainX, trainY):
    model = Sequential()
    model.add(LSTM(64, input_shape=(trainX.shape[1], trainX.shape[2]),
                return_sequences=True))
    model.add(LSTM(32, return_sequences=False))
    model.add(Dense(trainY.shape[1]))

    # specify your learning rate
    learning_rate = 0.001
    # create an Adam optimizer with the specified learning rate
    optimizer = Adam(learning_rate=learning_rate)
    # compile your model using the custom optimizer
    model.compile(optimizer=optimizer, loss='mse')

    return model


# 모델 불러오기
xgb_model = joblib.load(open(filename, 'rb'))

import tensorflow as tf
new_model = tf.keras.models.load_model('ks_lstm.h5')

raw_train.corr()

raw_train.drop('hband', axis=1, inplace=True)
raw_train.drop('lband', axis=1, inplace=True)
raw_train.drop('MACD_sign_12_26', axis=1, inplace=True)

raw_train

df = raw_train.loc[:,'close']

# !pip install pykalman

from pykalman import KalmanFilter
kf = KalmanFilter(transition_matrices = [1],
                  observation_matrices = [1],
                  initial_state_mean = 0,
                  initial_state_covariance = 1,
                  observation_covariance=1,
                  transition_covariance=.01)

state_means, _ = kf.filter(df)

df_smoothed = df.to_frame('close')
df_smoothed['Kalman Filter'] = state_means

for months in [1,2,3]:
    df_smoothed[f'MA ({months}m)'] = df.rolling(window=months*21).mean()

ax = df_smoothed.plot(title='Kalman Filter vs Moving Average', figsize=(14,6), lw=1, rot=0)
ax.set_xlabel('')
ax.set_ylabel('KS')
plt.tight_layout()
import seaborn as sns
sns.despine();

raw_train['kalman'] = df_smoothed['Kalman Filter']

raw_train.corr()

raw_train.columns

raw_train = raw_train[['close', 'open', 'high', 'low', 'rsi', 'MACD_12_26', 'mavg', 'CSI', 'kalman',
       'target']]

raw_train = raw_train.astype('float')

raw_train.to_csv("adj_raw_train.csv")

raw_train = raw_train.reset_index()

